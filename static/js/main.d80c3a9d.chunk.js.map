{"version":3,"sources":["components/matrice.js","components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Matrice","props","addCurrent","symbol","console","log","indexOf","previous","state","push","current","setState","calcul","calculate","old","core","eval","String","length","alert","this","buttons","cols","actions","reset","value","map","btn","i","key","Component","Caclculator","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d80c3a9d.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport Caclculator from \"./calculator\"\n\nclass Matrice extends Component {\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            current: '',\n            previous: []\n        }\n    }\n    reset() {\n        this.setState = ({\n            current: '',\n            previous: []\n        })\n    }\n    addCurrent = (symbol) => {\n        console.log(symbol)\n\n        if ([\"+\", \"*\", \"-\", \"/\"].indexOf(symbol) > -1) {\n            let { previous } = this.state\n            previous.push(this.state.current + symbol)\n            this.setState({ previous: previous, current: '' })\n        }\n\n\n\n        else {\n            var calcul = this.state.current + symbol\n            this.setState({\n                current: calcul\n            })\n        }\n\n    }\n\n    calculate = (symbol) => {\n        if ([\"=\"].indexOf(symbol) > -1) {\n            // let { previous } = this.state\n\n            let old = this.state.previous\n            let core = eval(String(old[old.length - 1] + this.state.current))\n            console.log(core)\n            this.setState({ previous: [], current: core })\n        }\n        else {\n            alert(\"wrong\")\n        }\n    }\n\n    render() {\n\n        const buttons = [\n            {\n                symbol: \"C\", cols: 3, actions: this.reset\n            },\n            {\n                symbol: \"/\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"7\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"8\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"9\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"*\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"4\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"5\", cols: 1, actions: this.addCurrent\n            },\n\n            {\n                symbol: \"6\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"-\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"1\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"2\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"3\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"+\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"0\", cols: 2, actions: this.addCurrent\n            },\n            {\n                symbol: \".\", cols: 1, actions: this.addCurrent\n            },\n            {\n                symbol: \"=\", cols: 1, actions: this.calculate\n            },\n\n        ]\n        return (\n\n            <div>\n                <h1>Calculatrice</h1>\n                <p>{\n                    this.state.previous[this.state.previous.length - 1]\n                }\n                </p>\n                <input value={this.state.current}></input>\n\n                {\n                    buttons.map((btn, i) => {\n                        return <Caclculator key={i} symbol={btn.symbol} cols={btn.cols} actions={(symbol) => btn.actions(symbol)} />\n                    })\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default Matrice\n","import React, { Component } from \"react\"\n\nclass Caclculator extends Component {\n\n    render() {\n        return (\n            <div className={`column-${this.props.cols}`}>\n                <button className=\"calc\" onClick={() => this.props.actions(this.props.symbol)}>{this.props.symbol}</button>\n            </div>\n        )\n    }\n}\n\n\nexport default Caclculator\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// import Caclculator from './components/calculator'\nimport Matrice from './components/matrice';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Matrice />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}